#!/bin/sh

function init_xonsh () {
                output+=$(cat <<EOF
# If you see this output, you probably forgot to 'execx' it:
# execx(\$(any-nix-shell $@))

# Overwrite the nix-shell command
aliases["nix-shell"] = "@(\$(which .any-nix-shell-wrapper)) xonsh @(\$args)"

# Overwrite the nix command
def __nix(args):
    if args and args[0] == "run":
        @(\$(which .any-nix-wrapper)) xonsh @(args)
    else:
        @(\$(which -s nix)) @(args)
aliases["nix"] = __nix
EOF
                )
    for arg in "$@"; do
        case "$arg" in
            --info-right)
                output+=$(cat <<EOF


# Print additional information inside a nix-shell environment
\$RIGHT_PROMPT = lambda: \$(@(\$(which nix-shell-info)))
EOF
                );;
            *) error;;
        esac
    done
}

function init_fish () {
                output+=$(cat <<EOF
# If you see this output, you probably forgot to pipe it into 'source':
# any-nix-shell $@ | source

# Overwrite the nix-shell command
function nix-shell
    $(which .any-nix-shell-wrapper) fish \$argv
end

# Overwrite the nix command
function nix
    if test \$argv[1] = run
        $(which .any-nix-wrapper) fish \$argv
    else
        command nix \$argv
    end
end
EOF
                )
    for arg in "$@"; do
        case "$arg" in
            --info-right)
                output+=$(cat <<EOF


# Print additional information inside a nix-shell environment
function fish_right_prompt
    $(which nix-shell-info)
    printf " "
end
EOF
                );;
            *) error;;
        esac
    done
}

function init_zsh () {
                output+=$(cat <<EOF
# If you see this output, you probably forgot to pipe it into 'source':
# any-nix-shell $@ | source /dev/stdin

# Overwrite the nix-shell command
function nix-shell () {
    $(which .any-nix-shell-wrapper) zsh "\$@"
}

# Overwrite the nix command
function nix () {
    if [[ "\$1" == "run" ]]; then
        $(which .any-nix-wrapper) zsh "\$@"
    else
        command nix "\$@"
    fi
}
EOF
                )
    for arg in "$@"; do
        case "$arg" in
            --info-right)
                output+=$(cat <<EOF


# Print additional information inside a nix-shell environment
precmd () {
    with_codes=\$($(which nix-shell-info))
    without_codes=\$(printf "\$with_codes" | sed -r "s/\\\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g")
    RPROMPT=%\${#without_codes}{\$with_codes%}
}

EOF
                );;
            *) error;;
        esac
    done
}

function error () {
    echo "echo ERROR: wrong usage"
    echo "bash -c \"\$(exit 1)\""
    exit 1
}

# main program begin

output=

case "$1" in
    xonsh) init_xonsh "${@:2}";;
    fish) init_fish "${@:2}";;
    zsh) init_zsh "${@:2}";;
    *) error;;
esac

echo "$output"
